@model IEnumerable<ContosoSite.Models.Record08030822>

@{
    ViewBag.Title = "Record1";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Record1</h2>










<script src="https://www.amcharts.com/lib/3/amcharts.js"></script>
<script src="https://www.amcharts.com/lib/3/pie.js"></script>
<script src="https://www.amcharts.com/lib/3/plugins/export/export.min.js"></script>
<link rel="stylesheet" href="https://www.amcharts.com/lib/3/plugins/export/export.css" type="text/css" media="all" />
<script src="https://www.amcharts.com/lib/3/themes/light.js"></script>
<div id="chartdiv"></div>

<script>
    var chart = AmCharts.makeChart("chartdiv", {
        "type": "pie",
        "startDuration": 0,
        "theme": "light",
        "addClassNames": true,
        "legend": {
            "position": "right",
            "marginRight": 100,
            "autoMargins": false
        },
        "innerRadius": "30%",
        "defs": {
            "filter": [{
                "id": "shadow",
                "width": "200%",
                "height": "200%",
                "feOffset": {
                    "result": "offOut",
                    "in": "SourceAlpha",
                    "dx": 0,
                    "dy": 0
                },
                "feGaussianBlur": {
                    "result": "blurOut",
                    "in": "offOut",
                    "stdDeviation": 5
                },
                "feBlend": {
                    "in": "SourceGraphic",
                    "in2": "blurOut",
                    "mode": "normal"
                }
            }]
        },
        "dataProvider": [{
            "country": "Moving constantly",
            "litres": "@ViewBag.MovingconstantlyNumber"
            //   "country": "Lithuania",
            // "litres": 501.9
        }, {
            "country": "and Then Dimmer",
            "litres": "@ViewBag.andThenDimmerNumber"
            // "country": "Czech Republic",
            //  "litres": 301.9
        }, {
            "country": "Same place",
            "litres": "@ViewBag.SameplaceNumber"
            //"country": "Ireland",
            // "litres": 201.1
        }
        , {
            "country": "Watching phone",
            "litres": "@ViewBag.WatchingphoneNumber"
        }, {
            "country": "Sitting",
            "litres": "@ViewBag.SittingNumber"
        }, {
            "country": "Still",
            "litres": "@ViewBag.StillNumber"
        }, {
            "country": "Dimmer",
            "litres": "@ViewBag.DimmerNumber"
        }, {
            "country": "Working",
            "litres": "@ViewBag.WorkingNumber"
        }, {
            "country": "Moving slightly",
            "litres": "@ViewBag.movingslightlyNumber"
        }, {
            "country": "Washing",
            "litres": "@ViewBag.WashingNumber"
        }, {
            "country": "and then light fluctuating",
            "litres": "@ViewBag.andthenlightfluctuatingNumber"
        }, {
            "country": "and then Strong brightness",
            "litres": "@ViewBag.andthenstrongbrightnessNumber"
        }, {
            "country": "Normal brightness",
            "litres": "@ViewBag.NormalbrightnessNumber"
        }, {
            "country": "Meal",
            "litres": "@ViewBag.MealNumber"
        }, {
            "country": "18 steps forward",
            "litres": "@ViewBag.the18stepsforwardNumber"
        }, {
            "country": "and then 8 steps forward",
            "litres": "@ViewBag.andthen8stepsforwardNumber"
        }


        ],
        "valueField": "litres",
        "titleField": "country",
        "export": {
            "enabled": true
        }
    });

    chart.addListener("init", handleInit);

    chart.addListener("rollOverSlice", function (e) {
        handleRollOver(e);
    });

    function handleInit() {
        chart.legend.addListener("rollOverItem", handleRollOver);
    }

    function handleRollOver(e) {
        var wedge = e.dataItem.wedge.node;
        wedge.parentNode.appendChild(wedge);
    }
</script>

<style>
    #chartdiv {
        width: 100%;
        height: 500px;
        font-size: 11px;
    }

    .amcharts-pie-slice {
        transform: scale(1);
        transform-origin: 50% 50%;
        transition-duration: 0.3s;
        transition: all .3s ease-out;
        -webkit-transition: all .3s ease-out;
        -moz-transition: all .3s ease-out;
        -o-transition: all .3s ease-out;
        cursor: pointer;
        box-shadow: 0 0 30px 0 #000;
    }

        .amcharts-pie-slice:hover {
            transform: scale(1.1);
            filter: url(#shadow);
        }
</style>									



















@using (Html.BeginForm())
{
    <p>
        Activity Name: @Html.DropDownList("activityName", "All") &nbsp &nbsp &nbsp
        Find by Action Name: @Html.TextBox("SearchString")
        <input type="submit" value="Search" class="btn-warning btn-md" id="search-button" />
    </p>
}

<style>
    #search-button {
        margin-left: 40px;
    }
</style>





<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.ActivityId)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Name)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Location)
        </th>
        @*<th>
            @Html.DisplayNameFor(model => model.Latitude)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Longitude)
        </th>*@
        <th>
            @Html.DisplayNameFor(model => model.Action)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Time)
        </th>
        
    </tr>

    @foreach(var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(model => item.ActivityId)
            </td>
            <td>
                @Html.DisplayFor(model => item.Name)
            </td>
            <td>
                @Html.DisplayFor(model => item.Location)
            </td>
            @*<td>
                @Html.DisplayFor(model => item.Latitude)
            </td>
            <td>
                @Html.DisplayFor(model => item.Longitude)
            </td>*@
            <td>
                @Html.DisplayFor(model => item.Action)
            </td>
            <td>
                @Html.DisplayFor(model => item.Time)
            </td>
        </tr>

    }
</table>
